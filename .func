#!/bin/bash

calc() {
  if ! command -v bc &> /dev/null; then
    echo "bc not found, attempting to install..."
    sudo apt-get update && sudo apt-get install -y bc || { echo "Failed to install bc. Please install it manually."; return 1; }
  fi
  local result=$(printf "scale=10;%s\n" "$*" | bc --mathlib | tr -d '\n')
  [[ "$result" == *.* ]] && result=$(echo "$result" | sed -e 's/^\./0./;s/^-\./-0./;s/0*$//;s/\.$//')
  printf "%s\n" "$result"
}

dataurl() {
  local file="$1"
  [ -z "$file" ] && { echo "Usage: dataurl <file>"; return 1; }
  [ ! -f "$file" ] && { echo "Error: File '$file' not found."; return 1; }
  local mime_type=$(file -b --mime-type "$file")
  [[ $mime_type == text/* ]] && mime_type="${mime_type};charset=utf-8"
  local base64_content=$(openssl base64 -in "$file" | tr -d '\n')
  echo "data:${mime_type};base64,${base64_content}"
}

function port() {
  local PORT="$1"
  [ -z "$PORT" ] && { echo "Usage: port <port_number>"; return 1; }
  if ! [[ "$PORT" =~ ^[0-9]+$ ]] || [ "$PORT" -lt 1 ] || [ "$PORT" -gt 65535 ]; then
    echo "Error: Port number must be a positive integer between 1 and 65535."
    return 1
  fi
  lsof -iTCP:"$PORT" -sTCP:LISTEN
}

# Usage: extract <file>
extract() {
    if [ -z "$1" ]; then
        echo "Usage: extract <file>"
        return 1
    fi
    local FILE="$1"
    if [ ! -f "$FILE" ]; then
        echo "Error: File '$FILE' not found."
        return 1
    fi
    case "$FILE" in
        *.tar.bz2|*.tbz2) tar -jxvf "$FILE" ;;
        *.tar.gz|*.tgz)   tar -zxvf "$FILE" ;;
        *.bz2)            bunzip2 "$FILE" ;;
        *.dmg)            hdiutil mount "$FILE" ;;
        *.gz)             gunzip "$FILE" ;;
        *.tar)            tar -xvf "$FILE" ;;
        *.zip|*.ZIP)      unzip "$FILE" ;;
        *.pax)            pax -r -f "$FILE" ;;
        *.pax.Z)          uncompress "$FILE" | pax -r ;;
        *.Z)              uncompress "$FILE" ;;
        *)                echo "Error: '$FILE' cannot be extracted" ;;
    esac

    if [ $? -ne 0 ]; then
        echo "Error: Extraction failed"
        return 1
    fi
}

wcc() {
  if [ -z "$1" ]; then
    echo "Usage: wcc <file>"
    return 1
  fi
  local FILE_NAME="$1"
  if [ ! -f "$FILE_NAME" ]; then
    echo "Error: File '$FILE_NAME' not found."
    return 1
  fi
  read -r LINE WORD CHAR BYTE <<< $(wc -l -w -m -c < "$FILE_NAME")
  echo "$FILE_NAME"
  echo "---"
  echo "Byte: $BYTE"
  echo "Char: $CHAR"
  echo "Word: $WORD"
  echo "Line: $LINE"
  echo
}

function useproxy() {
    if [ -z "$1" ]; then
      echo "Usage: useproxy <ip>"
      return 1
    fi
    local PROXY_IP="$1"
    export HTTP_PROXY=http://$PROXY_IP:7890
    export http_proxy=http://$PROXY_IP:7890
    export HTTPS_PROXY=http://$PROXY_IP:7890
    export https_proxy=http://$PROXY_IP:7890
    export ALL_PROXY=http://$PROXY_IP:7890
    export all_proxy=http://$PROXY_IP:7890
    export NO_PROXY="localhost,127.0.0.1,.local,10.0.0.0/8,192.168.0.0/16"
    export no_proxy="localhost,127.0.0.1,.local,10.0.0.0/8,192.168.0.0/16"
    echo "Proxy set to $PROXY_IP:7890"
}

function noproxy() {
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset ALL_PROXY
    unset NO_PROXY
    echo "Proxy disabled"
}

# Get prefixes by ASN
asn2prefix() {
    local asn="$1"
    local cache_file=/tmp/bgp_table.txt
    if command -v rg &> /dev/null; then
        search_tool="rg"
    else
        search_tool="grep -E"
    fi
    # Cache: 8h
    if [[ ! -f "$cache_file" ]] || [[ $(find "$cache_file" -mmin +480 2>/dev/null) ]]; then
        echo "Updating cache..."
        curl -s -o "$cache_file" -H "User-Agent: Mozilla/5.0+(compatible; asn2prefix/1.0-bash; github.com/xiaozhu2007/dotfiles)" https://bgp.tools/table.txt || {
            echo "Error downloading table.txt" >&2
            return 1
        }
    fi
    $search_tool $asn $cache_file | cut -d' ' -f1
}

# Upload Files to XMSL
xmsl() {
    if [ -z "$1" ]; then
        echo "Usage: xmsl <filename> [filename=value1 expires_in=7d ...]"
        return 1
    fi

    local file="$1"
    if [ ! -f "$file" ]; then
        echo "Error: File '$file' not found."
        return 1
    fi

    shift
    local form_params=()

    # Parse
    for arg in "$@"; do
        if [[ "$arg" != *=* ]]; then
            echo "Error: Invalid parameter format: '$arg'. Must be key=value."
            return 1
        fi

        local key="${arg%%=*}"
        local value="${arg#*=}"
        form_params+=(-F "$key=$value")
    done

    curl_cmd=(curl -s -F "file=@$file" "${form_params[@]}" -H "User-Agent: Mozilla/5.0+(compatible; xmsl/1.0-bash; github.com/xiaozhu2007/dotfiles)" https://xmsl.im/p)

    # Upload
    "${curl_cmd[@]}"
}

camo() {
    local original_url="$1"

    # Parameter validation
    if [ -z "$original_url" ]; then
        echo "Usage: camo <url>" >&2
        return 1
    fi

    # Configuration defaults
    local camo_base_url=${CAMO_BASE_URL:-https://camo.liuzhen932.top}
    local camo_secret_file=${CAMO_SECRET_FILE:-~/.camo_key}

    # Check secret file existence
    if [[ ! -f "$camo_secret_file" ]]; then
        echo "Error: Secret file '$camo_secret_file' not found" >&2
        return 1
    fi

    # Read secret from file
    local camo_secret=$(< "$camo_secret_file")

    # Convert URL to hexadecimal string
    local asset_url=$(printf '%s' "$original_url" | xxd -p -u | tr -d '\n')

    # Calculate HMAC-SHA1 digest
    local digest=$(printf '%s' "$original_url" | openssl dgst -sha1 -hmac "$camo_secret" -binary | xxd -p -u | tr -d '\n')
    
    # Error handling
    if [[ $? -ne 0 ]]; then
        echo "Error: HMAC signature calculation failed. Ensure OpenSSL and xxd is installed." >&2
        return 1
    fi

    # Output final Camo URL
    echo "${camo_base_url}/${digest}/${asset_url}"
}

xurl() {
    if [ -z "$1" ]; then
        echo "Usage: xmsl_url <url> [title=value1 expires_in=7d ...]"
        return 1
    fi

    local url="$1"
    local xmsl_apikey_file=${CAMO_SECRET_FILE:-~/.xmsl_api_key}
    # Check secret file existence
    if [[ ! -f "$xmsl_apikey_file" ]]; then
        echo "Error: API Key file '$xmsl_apikey_file' not found" >&2
        return 1
    fi

    # Read secret from file
    local xmsl_apikey=$(< "$xmsl_apikey_file")

    shift
    local form_params=()

    # Parse
    for arg in "$@"; do
        if [[ "$arg" != *=* ]]; then
            echo "Error: Invalid parameter format: '$arg'. Must be key=value."
            return 1
        fi

        local key="${arg%%=*}"
        local value="${arg#*=}"
        form_params+=(-F "$key=$value")
    done

    curl_cmd=(curl -s -d "url=$url" "${form_params[@]}" -H "Authorization: Bearer $xmsl_apikey" -H "User-Agent: Mozilla/5.0+(compatible; xmsl/1.0-bash; github.com/xiaozhu2007/dotfiles)" https://xmsl.im/u)

    # Shorten
    "${curl_cmd[@]}"
}